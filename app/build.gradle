/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'checkstyle'
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // https://mvnrepository.com/artifact/org.json/json
    implementation 'org.json:json:20240303'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'

    // AWS
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
    implementation 'com.amazonaws:aws-java-sdk-cloudwatch:1.12.+'
    implementation 'com.amazonaws:aws-java-sdk-dynamodb:1.12.+'

    // Mockito
    implementation 'org.mockito:mockito-core:4.+'
    implementation "org.mockito:mockito-inline:4.+"

    // Dagger
    implementation 'com.google.dagger:dagger:2.42'
    testImplementation 'junit:junit:4.13.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.44'

    // Logging
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'
}

application {
    // Define the main class for the application.
    mainClass = 'bookiepedia.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/${name}.exec")
    }
}

/* checkstyle */

// Applies Checkstyle plugin quality checks on projectâ€™s Java source files and generates reports from these checks.
checkstyle {
    toolVersion '8.17'

    // Expect the checkstyle config to be in a either the current directory or
    //  a parent, grandparent or great-grandparent directory of the root project
    // NOTE: The purpose of putting checkstyle config in a higher directory is to
    //       share the same config among multiple projects.
    def configFilePath = 'checkstyle/checkstyle.xml'
    for (int attempts = 0; attempts < 4; attempts++) {
        configFile = rootProject.file(configFilePath)

        if (configFile.exists()) {
            break;
        }

        configFilePath = '../' + configFilePath
    }

    def checkstyleDir = configFile.toPath().parent
    def suppressionFile = new File("$checkstyleDir/unit3/suppressions.xml")
    configProperties.put('checkstyle.suppression.filter', suppressionFile) // This property is refereced in `checkstyle.xml`

    sourceSets = [sourceSets.main]
}

// If we are running the task 'staticchecks', do not ignore failures, otherwise ignore
checkstyleMain.doFirst {
    ignoreFailures = !gradle.taskGraph.allTasks.any({ it.name ==~ /.*staticchecks/ })
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                //minimum = 0.8
                minimum = 0.0
            }
        }
    }
}